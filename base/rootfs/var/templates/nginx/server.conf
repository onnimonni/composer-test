server {
    # This is the default server for this container
    listen {{.Env.PORT}} default_server;
    server_name _;

    root {{.Env.WEB_ROOT}};

    # Use index.php if it exists but also allow static websites in subfolders
    index index.php index.html;
    
    access_log /dev/stdout custom;

    # Blocked log file
    set $blocked_log /dev/stdout;

    disable_symlinks off;

    # These variables are proxy conscious, so that they work even though we are behind reverse proxy
    include proxy_real_variables.conf;

    # Include custom error pages
    include error_pages.conf;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
        try_files $uri @index;
    }

    location = /favicon.ico {
        allow all;
        log_not_found off;
        access_log off;
        try_files $uri @index;
    }

    # deny all dot-files including git
    location ~ /\. {
        deny all;
        log_not_found off;
        access_log off;
    }

    location / {
        try_files $uri $uri/ /wp/$uri /wp/$uri/ @index;
    }

    # Static files
    location ~* \.(css|js|jpe?g|gif|ico|png|otf|ttf|eot|woff?2|svg|webp)$ {

        include static_files.conf;

        # These files are probably exactly like $uri says but also try from /wp/
        try_files $uri /wp/$uri @index;
    }

    # App folder contains our plugins and themes
    # We want to server assets from here but deny all php execution
    location /app/ {
        try_files $uri @index;

        ##
        # Deny access into php files under /app/
        ##
        location ~ \.php$ {
            access_log $blocked_log blocked;
            deny all;
        }
    }

    ##
    # Run all php files from wp subfolder
    # This is how wordpress is supposed to be run
    # It also prevents direct access to possibly insecure code inside our plugins
    ##
    location ~ \.php$ {
        try_files /wp/$uri @index;

        include fastcgi_settings.conf;

        # Append subfolder automatically
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # Handover 404 errors from php-fpm to WordPress
        error_page 404 = @index;

        # Give sane max execution time to frontend
        #fastcgi_read_timeout ${NGINX_FASTCGI_TIMEOUT};
        fastcgi_pass php-fpm;

        ## Deny access to all php files in uploads folders
        location ~* ^/uploads { access_log $blocked_log blocked; deny all; }
        location ~* ^/content/uploads { access_log $blocked_log blocked; deny all; }
        location ~* ^/wp-content/uploads { access_log $blocked_log blocked; deny all; }

        ## Fix Full Path Disclosures if display_errors is on
        ## Don't allow straight access into core wp-includes
        location ~* ^/wp-includes { access_log $blocked_log blocked; deny all; }
    }

    location @index {

        ## Deny overriding Pagespeed
        if ($arg_pagespeed != '') {  access_log $blocked_log blocked; return 403; }
        if ($arg_pagespeedspeedfilters != '') {  access_log $blocked_log blocked; return 403; }

        # Fallback into php
        include fastcgi_settings.conf;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;

        # Give sane max execution time to frontend
        fastcgi_read_timeout {{.Env.NGINX_FASTCGI_TIMEOUT}};
        fastcgi_pass php-fpm;
    }

    location = / {

        ## Block hackers from enumerating users
        if ( $arg_author ~ [0-9]+ ) { access_log $blocked_log blocked; return 403; }

        ## Deny overriding Pagespeed
        if ($arg_pagespeed != '') {  access_log $blocked_log blocked; return 403; }
        if ($arg_pagespeedspeedfilters != '') {  access_log $blocked_log blocked; return 403; }

        # Fallback into php
        include fastcgi_settings.conf;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;

        # Give sane max execution time to frontend
        fastcgi_read_timeout {{.Env.NGINX_FASTCGI_TIMEOUT}};
        fastcgi_pass php-fpm;
    }

    # WordPress is stupid
    location = /wp-admin { rewrite ^ /wp-admin/ permanent; }

    # Prevent /wp/wp/wp/... rewrite loops
    location ^~ /wp/ {
        rewrite ^/wp/(.*)$ $1$is_args$args last;
    }

    # Block some vulnerabilities always
    include security.conf;
}